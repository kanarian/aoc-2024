inp_real="""..................................................
.r................................................
..........................I.......................
........................I.........................
................................................M.
............h......................A..............
..7....................I.........h................
......7..................................M....9...
.o.....U..........................................
......................................O...........
....c.................J................O...M...A..
..................................................
...R...7..........................................
..............r...................................
...................J..................9...........
...7..K......UJ...................................
......0...U.........................x.............
.......R.......0..B......................x........
.......................k.....Z.......9............
.......L.........I.....J............m.............
.....K.BR........r.0.C............................
.......K.BR......c................................
..................h....m....Al...........H........
..............L..k.......h...m..........x..9......
........................Z.....m........xO.........
..........0................l......................
.6..................b.............................
............k...o..............Z..................
........4.....o...........L.......................
....................Xo............................
...........8..B..L.........i......................
..z...............bX..........A...................
j........z...X......C.......i........5............
.b...H6.......................U.......l...........
..................X...............................
...6......................Z..........a............
....6........c............5.........1.............
.4.......................5........................
..........k.......H1l.............................
2.................C.......i...................u...
.............a....2...............................
.....z....H.......1..8.....................u......
...........j...b..................................
3.........j.........................a.............
...4................a.............................
..M................j.....1..........5.............
............................................u.....
..4..3...........i................................
z3.................2..............................
..........8..................2.C.................."""
inp_test="""............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............"""

inp_special_test="""..........
..........
..........
....a.....
........a.
.....a....
..........
..........
..........
.........."""

inp_special_test_easy="""..........
..........
..........
....a.....
..........
.....a....
..........
..........
..........
.........."""

inp_T="""T.........
...T......
.T........
..........
..........
..........
..........
..........
..........
.........."""

inp = inp_real

vals = [list(el) for el in inp.split("\n")]
antenna_resonance_position_dict = {}
for rowIdx, row in enumerate(vals):
    for colIdx, el in enumerate(row):
        if el != ".":
            if el in antenna_resonance_position_dict:
                antenna_resonance_position_dict[el].append((rowIdx,colIdx))
            else:
                antenna_resonance_position_dict[el] = [(rowIdx,colIdx)]

antinodes_locations = []
for key, coordinates in antenna_resonance_position_dict.items():
    all_coord_pairs = []
    for coord_one in coordinates:
        for coord_two in coordinates:
            if coord_one != coord_two and (coord_one, coord_two) not in all_coord_pairs and (coord_two, coord_one) not in all_coord_pairs:
                all_coord_pairs.append((coord_one,coord_two))
    for coord_pair in all_coord_pairs:
        (coord_one, coord_two) = coord_pair
        diffRow = coord_one[0] - coord_two[0]
        diffCol = coord_one[1] - coord_two[1]
        for i in range(0, max(len(vals[0]),len(vals))):
            antinode_coord_one = (coord_one[0] + diffRow*i, coord_one[1] + diffCol*i)
            antinode_coord_two = (coord_two[0] - diffRow*i, coord_two[1] - diffCol*i)
            antinodes_locations.extend([antinode_coord_one,antinode_coord_two])

# check if antinodes are out of bounds
inbound_antinodes = list(filter(lambda x: x[0] >= 0 and x[1] >= 0 and x[0] <= len(vals[0]) -1 and x[1] <= len(vals) -1,antinodes_locations))

deduped_inbound_antinodes = list(set(inbound_antinodes))

def pprint(vals, antinodes):
    for antiNode in antinodes:
        vals[antiNode[0]][antiNode[1]] = "#"
    print("\n".join(["".join(val) for val in vals]))


print(f"len deduped {len(deduped_inbound_antinodes)}")
pprint(vals,deduped_inbound_antinodes)




