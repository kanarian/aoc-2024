import queue

inp_real="""012589824304345454345653403898787654310365890
323456712215216783238732312345693201223456781
450144603304306690129641002105892100378901672
343223454456987601234553213456743898465432543
234019765567898501246764789122156784567643456
105678876678983454334895601033021093298932167
987619989569332569543210592344534580112341098
294501238410221078632346787659645676903654348
103410549322101010701458698998765019854789239
212321678989230127890569542345674326761021178
101436769476541436909878431089781015432430087
212345854300498545415678921678196727034567696
210256901211067636324105670543067878123678545
367107810562109897013234787102158969243989430
458998765673456708943101496234549054552170121
321043234589843217652112345109632143461078760
423450103477876876501001232238761232678989654
214567612100945983492376521045690101021234523
105678998761238012385489431058788987120098012
210987787687439121076378942389005678967127656
309456712596528732154307875470114343458934565
498349803487015678567210566965223062101703403
567208701236012569458923417854332176019812212
610119654345643454345698706763894385498703389
231023543210789843210789210012765294307654471
132984980125632310107650123498874101212343560
045675670346541001238943210567943079810014541
125036561257892890547765300343012986701321632
034123498766783087654854301250123875432430701
945671210345892167898901232765234566001521894
876980343210763012789876501875678987189654323
567878432198754803650105432984789843278789010
438969567087634984543215678793212658943898123
821054698456125675643454349783104367652387654
981023789307087676012067245692323456701098578
672316548218996587654198130541214987898123469
543007437100105498903210021230301854302210158
432108128901234567810347130765415675211000147
543219037654323216921438941891034986732789230
698349898341010105434567234567127867845654321
786458723038765123457870123898221058965421032
665467012129851034566962123765432348974330541
674398543122345643677870054878901067889245670
983287654031298762986521067965013454900196989
210189876540107601095432398874322103210187878"""

inp_test_small=""".....0.
..4321.
..5..2.
..6543.
..7..4.
..8765.
..9...."""

inp_test="""89010123
78121874
87430965
96549874
45678903
32019012
01329801
10456732"""

inp_test_small_two="""..90..9
...1.98
...2..7
6543456
765.987
876....
987...."""
 
inp_test_three="""012345
123456
234567
345678
4.6789
56789."""


inp=inp_real

inp = [[-1 if l =="." else int(l) for l in list(el)] for el in inp.split("\n")]

def find_all_X(inp,X):
    coords = []
    for rowIdx, row in enumerate(inp):
        for colIdx, cel in enumerate(row):
            if cel == X:
                coords.append((rowIdx,colIdx))
    return coords

find_all_zeroes = lambda x: find_all_X(x,0)
find_all_nines = lambda x: find_all_X(x,9)

def coord_is_in_bound(coord, inp):
    return 0 <= coord[0] <= len(inp)-1 and 0 <= coord[1] <= len(inp[0]) - 1

all_zeroes = find_all_zeroes(inp)
all_nines = find_all_nines(inp)

left_coord = lambda x: (x[0],x[1]-1)
right_coord = lambda x: (x[0],x[1]+1)
up_coord = lambda x: (x[0]-1,x[1])
down_coord = lambda x: (x[0]+1,x[1])

total_trails = []
for zero_coord in all_zeroes:
    this_queue = queue.Queue()
    trails = []
    this_queue.put((zero_coord,0,(zero_coord)))
    while not this_queue.empty():
        this_coord, this_val, this_trail = this_queue.get()
        if this_val == 9:
            if this_trail not in trails:
                trails.append(this_trail)
            continue
        left, right, up, down = left_coord(this_coord), right_coord(this_coord), up_coord(this_coord), down_coord(this_coord)
        inbound_possible_coords = [new_coord for new_coord in [left,right,up,down] if coord_is_in_bound(new_coord,inp)]
        possible_coord_exactly_one_up = [inb_poss_coord for inb_poss_coord in  inbound_possible_coords if inp[inb_poss_coord[0]][inb_poss_coord[1]] == this_val+1]
        for next_poss_coords in possible_coord_exactly_one_up:
            new_trail = (*this_trail, next_poss_coords)
            this_queue.put((next_poss_coords, this_val + 1,new_trail))

    # print(f"zero at {zero_coord} has heads {len(score_idxs)}")
    # for score_idx in score_idxs:
    #     print(f"score_idx {score_idx}")
    this_trails_len = len(trails)
    total_trails.append(this_trails_len)
print(sum(total_trails))
